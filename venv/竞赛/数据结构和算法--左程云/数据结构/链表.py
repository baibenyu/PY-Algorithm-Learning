# __project_ = 'reptile'
# __author_ = 'baibe'
# __time_ = '2022/6/3 20:33'

import time

if __name__ == '__main__':
    start = time.clock()
    """
    1.逆转链表
    解:多用变量,理清关系
    2.链表的相同部分
    解:双指针,指针指向的数小的动
    3.判断是否是回文链表
    解:入栈后出栈,看是否相同,若用快慢指针仅存储后半部分可节省一半空间,若在快慢指针基础上,遍历时反转慢指针之前的结点的指向,可以只使用常数空间
    4.对链表进行稳定的快排
    解:分别用变量标记小于,等于,大于基准值的开头,结尾.再对特殊情况讨论,如全为基准值或缺失某个部分
    5.对含随机指针的链表的拷贝
    解:先拷贝节点值并放在相邻结点之间,再拷贝随机指针,最后再拆出来
    6.有两个链表,它们可能有环或无环,若相交,返回相交的第一个结点,否则返回false
    解:两个无环链表:直接在两链表之后衔接另一个链表,若能遍历到相同位置,此时为相交第一个结点,否则False
    一个有环,一个无环:不可能相交,直接返回False
    两个均有环:1)两链表入环结点不同--[1]无相交结点,单纯是两个有环链表
                                [2]有相交结点,是同一个环中的不同结点,即入环结点不同,此时可任意返回其中一个
            2)两链表入环结点相同--[1]说明即是同一个环,且相交结点在入环结点之前,可以视为均无环情况处理
    """
    end = time.clock()
    print(end - start)
